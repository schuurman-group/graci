#!/usr/bin/env python
"""
The main graci driver.
"""
import os
import sys as sys
import h5py
import graci.io.chkpt as chkpt

valid_formats = ['molden','gamess']
#
def main():
    """Runs a GRaCI computation."""

    # read command line options
    chkpt_file, extract_list, cutoff = read_cmdline()

    # parse the wfn file and pull out all 
    # determinants with coefficients >= cutoff
    parse_chkpt(chkpt_file, extract_list, cutoff)

    return

#
def read_cmdline():
    """
    Read command line arguments
    Set relevant global variables.
    """

    extract_list = {'-scf'     : None,
                    '-nos'     : None,
                    '-nto'     : None, 
                    '-ndo'     : None,
                    '-dets'    : None,
                    '-format'  : 'molden'}

    chkpt_file  = sys.argv[1].strip()
    cutoff      = 0.

    for arg in extract_list.keys():
        if arg in sys.argv:
            # what follows scf is the name of the scf
            # section
            sec_name = get_next_arg(arg)
            # section name is not absolutely necessary: if a single 
            # appropriate section is present, pull quantities from that
            if sec_name not in extract_list.keys() and sec_name not None:
                extract_list[arg] = sec_name
            # if name not given, use default name: Class_name.Class_name
            else:
                extract_list[arg] = 'default'

    if '-cutoff' in sys.argv:
        cutoff = sys.argv[sys.argv.index('-cutoff')+1].strip()
        extract_list['wfn'] = True

    return chkpt_file, extract_list, cutoff

#
def parse_chkpt(chkpt_file, extract_list, cutoff):
    """read the the determinants from the h5 wfn file"""

    # get the contents of the checkpoint file
    chkpt_objs = chkpt.contents(chkpt_file)

    # determine the GRaCI object(s) that need to be created,
    # or if requests are ambiguous (multiple objects of same
    # type exist)
    
    # first scf object(s)
    if extract_list['-scf'] is not None:

        # get list of scf objects in chkpt file
        chkpt_scf = [scf_obj for scf_obj in chkpt_objs 
                                        if 'Scf' in scf_obj]
        if extract_list['-scf'] == 'default' and len(chkpt_scf) == 1:
            scf_name = chkpt_scf[0]
        else:
            scf_name = extract_list['-scf']


    return

#
def print_wfn(chkpt, indx, cutoff):
    """Print the determinant list"""

    # using 64-bit integers to store det occupations
    STR_LEN = 64

    # first extract the coefficient list up to a value of "cutoff"
    cf_name  = 'wfn_cf'+str(indx)
    det_name = 'wfn_det'+str(indx)

    (ndet_wfn, n_tot) = chkpt[det_name].shape
    (ndet_cf,   dum)  = chkpt[cf_name].shape
     
    if ndet_wfn != ndet_cf:
        print("WARNING: determinant and coefficient lists are not"+
                " the same length: "+str(ndet_wfn)+"!="+str(ndet_cf))

    ndet  = min(ndet_wfn, ndet_cf)
    n_int = int(n_tot / 2)
    nmo   = int(chkpt[det_name].attrs['nmo'])

    for idet in range(ndet):
        cf  = float(chkpt[cf_name][idet,0])
        if cf < cutoff:
            break

        det = chkpt[det_name][idet,:]

        alpha = []
        beta  = []

        for i_int in range(n_int):       
            alpha_i = list(reversed("{0:b}".format(det[i_int])))
            alpha  += alpha_i + ['0' for i in range(STR_LEN - len(alpha_i))]

            beta_i  = list(reversed("{0:b}".format(det[n_int + i_int])))
            beta   += beta_i + ['0' for i in range(STR_LEN - len(beta_i))]

        # only take first nmo entries -- the rest are padding
        dabs = [int(alpha[i]) + int(beta[i]) for i in range(nmo)]
        rdet = []
        for i in range(nmo):
            if int(alpha[i]) == 0:
                rdet.append(-dabs[i])
            else:
                rdet.append(dabs[i])

        det_str  = '{:14.10f} '.format(cf)
        det_str += ('%3d'*nmo) % tuple(rdet)
        print(det_str)

    return

#
def get_next_arg(arg):
    """get the next argument in the comment line that follows
       argument 'arg'"""

    if len(sys.argv) > sys.argv.index(arg)+1:
        return sys.argv[sys.argv.index(arg)+1].strip()
    else:
        return None

if __name__ == '__main__':

    # run the main routine
    main()


#!/usr/bin/env python
"""
The main graci driver.
"""
import os
import sys as sys
import h5py
import graci.io.chkpt as chkpt
import graci.core.params

valid_formats = ['molden','gamess']
orb_objs      = {'-scf' : ['Scf'],
                 '-nos' : ['Dftmrci','Dftcis'],
                 '-nto' : ['Transition'],
                 '-ndo' : ['Transition']}
wfn_objs      = {'-dets' : ['Dftmrci','Dftcis']}                

#
def main():
    """Runs a GRaCI computation."""

    # read command line options
    chkpt_file, extract_list, cutoff = read_cmdline()

    # parse the wfn file and pull out all 
    # determinants with coefficients >= cutoff
    extract_orbitals(chkpt_file, extract_list)
   
    # extract det/csf lists if requested
    extract_wfns(chkpt_file, extract_list)

    return

#
def read_cmdline():
    """
    Read command line arguments
    Set relevant global variables.
    """

    extract_list = {'-scf'     : None,
                    '-nos'     : None,
                    '-nto'     : None, 
                    '-ndo'     : None,
                    '-dets'    : None,
                    '-format'  : 'molden',
                    '-cutoff'  : 0}

    chkpt_file  = sys.argv[1].strip()
    cutoff      = 0.

    for arg in extract_list.keys():
        if arg in sys.argv:
            # what follows scf is the name of the scf
            # section
            arg_val = get_next_arg(arg)
            # section name is not absolutely necessary: if a single 
            # appropriate section is present, pull quantities from that
            if arg_val not in extract_list.keys() and arg_val is not None:
                extract_list[arg] = arg_val
            # if argument not given, define default behavior
            else:
                extract_list[arg] = 'default'

    # do some sanity checking on the format argument
    if extract_list['-format'] not in valid_formats:
        print("File format: "+str(extract_list['-format'])+
                                       " not a known file format")
        sys.exit(1)

    return chkpt_file, extract_list, cutoff

#
def extract_orbitals(chkpt_file, extract_list):
    """read the the determinants from the h5 wfn file"""

    # get the contents of the checkpoint file
    chkpt_objs = chkpt.contents(chkpt_file)

    # determine the GRaCI object(s) that need to be created,
    # or if requests are ambiguous (multiple objects of same
    # type exist)
    
    # first scf object(s)
    for key, value in extract_list.items():

        # skip this item if not requested
        if value is None:
            continue

        # these are not orbital related 
        if key=='-dets' or key=='-cutoff' or key=='-format':
            continue

        # figure out which object to extract:
        # 1. if -scf, either go with name provided, or, if only
        #    one Scf object present, extract that. Else: fail
        # 2. if -nos, either go with name provided, or, if only
        #    one Postscf object present, extract that. Else: fail
        # 3. if -nto/-ndo, either go with name provided, or, if only
        #    one Transitoin object present, extract that. Else: fail
        valid_objs = orb_objs[key]

        # names in chkpt file given by ClassName.label
        obj_names = [name for name in chkpt_objs if 
                                  name.split('.')[0]  in valid_objs]
        if value == 'default' and len(obj_names) == 1:
            obj2extract = obj_names[0]
        else:
            obj2extract = str(value)

        if obj2extract not in obj_names:
            print("Section: "+str(obj2extract)+" not found "+
                    "in chkpt file")
            sys.exit(1)

        # extract objects and write to current directory
        chkpt_obj = chkpt.read(chkpt_file, obj2extract)
        chkpt_obj.export_orbitals(file_format=extract_list['-format'], 
                                orb_dir=False)

    return

#
def extract_wfns(chkpt, extract_list):
    """Print the determinant list"""

    # using 64-bit integers to store det occupations
    STR_LEN = 64

    # first extract the coefficient list up to a value of "cutoff"
#    cf_name  = 'wfn_cf'+str(indx)
#    det_name = 'wfn_det'+str(indx)

#    (ndet_wfn, n_tot) = chkpt[det_name].shape
#    (ndet_cf,   dum)  = chkpt[cf_name].shape
     
#    if ndet_wfn != ndet_cf:
#        print("WARNING: determinant and coefficient lists are not"+
#                " the same length: "+str(ndet_wfn)+"!="+str(ndet_cf))

#    ndet  = min(ndet_wfn, ndet_cf)
#    n_int = int(n_tot / 2)
#    nmo   = int(chkpt[det_name].attrs['nmo'])

#    for idet in range(ndet):
#        cf  = float(chkpt[cf_name][idet,0])
#        if cf < cutoff:
#            break

#        det = chkpt[det_name][idet,:]

#        alpha = []
#        beta  = []

#        for i_int in range(n_int):       
#            alpha_i = list(reversed("{0:b}".format(det[i_int])))
#            alpha  += alpha_i + ['0' for i in range(STR_LEN - len(alpha_i))]

#            beta_i  = list(reversed("{0:b}".format(det[n_int + i_int])))
#            beta   += beta_i + ['0' for i in range(STR_LEN - len(beta_i))]

        # only take first nmo entries -- the rest are padding
#        dabs = [int(alpha[i]) + int(beta[i]) for i in range(nmo)]
#        rdet = []
#        for i in range(nmo):
#            if int(alpha[i]) == 0:
#                rdet.append(-dabs[i])
#            else:
#                rdet.append(dabs[i])

#        det_str  = '{:14.10f} '.format(cf)
#        det_str += ('%3d'*nmo) % tuple(rdet)
#        print(det_str)

#    return

#
def get_next_arg(arg):
    """get the next argument in the comment line that follows
       argument 'arg'"""

    if len(sys.argv) > sys.argv.index(arg)+1:
        return sys.argv[sys.argv.index(arg)+1].strip()
    else:
        return None

if __name__ == '__main__':

    # run the main routine
    main()


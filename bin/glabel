#!/usr/bin/env python
"""
The main graci driver.
"""
import os
import json
import sys as sys
import h5py as h5py
import graci.io.chkpt as chkpt

#
def main():
    """
    Merges a list of checkpoint files into a single checkpoint file. 
    """

    # read command line options
    (chkpt_file, show, obj_name, attr_name, value) = read_cmdline()

    # open the checkpoint file
    chkpt_handle = h5py.File(chkpt_file, 'r+', libver='latest')

    if obj_name is not None and obj_name not in chkpt_handle:
        print(str(obj_name) + ' not found in ' + str(chkpt_file))
  
    if show:
        print_contents(chkpt_handle, obj_name, attr_name)

    else:
        # construct a dictionary from key value pairs
        attr = json.loads(value)
        if type(attr).__name__ != 'dict':
            print(' label written as type: '+str(type(attr).__name__))     

        # write attribute
        chkpt.write_attribute(chkpt_handle, obj_name, attr_name, attr)

        # close
        chkpt_handle.close()
   
    return

#
def print_contents(fhandle, obj_name=None, attr_name=None):
    """
    print the top level objs in chkpt_handle and the corresponding label
    """
    obj_lst = chkpt.contents(file_handle = fhandle, 
                                grp_name = obj_name)

    if attr_name is not None:
        aname = str(attr_name)
    else:
        aname = 'label'

    if obj_name is None:
        prefix = '/'
    else:
        prefix = '/' + obj_name + '/'

    for obj in obj_lst:
        attr = chkpt.read_attribute(fhandle, prefix+obj, aname)
        if attr is None:
            attr = '--'
        print('Section: {:>50} {:>15}: {:>40}'.format(obj, aname, str(attr)))

    return

#
def read_cmdline():
    """
    Read command line arguments
    Set relevant global variables.
    """

    valid_args = ['-list', '-section', '-name', '-value']
    arg_list   = sys.argv[1:]

    chk_file = arg_list[0]
    if not os.path.isfile(chk_file):
        sys.exit(' Checkpoint file not found: '+str(chk_file))

    show      = False
    obj_name  = None
    attr_name = None
    value     = None
    for arg in arg_list[1:]:

        if arg == '-list':
            show      = True
              
        elif arg == '-section':
            obj_name  = get_next_arg(arg)

        elif arg == '-name':
            attr_name = get_next_arg(arg)

        elif arg == '-value':
            value     = get_next_arg(arg)

    return (chk_file, show, obj_name, attr_name, value)

#
def get_next_arg(arg):
    """get the next argument in the comment line that follows
       argument 'arg'"""

    if len(sys.argv) > sys.argv.index(arg)+1:
        return sys.argv[sys.argv.index(arg)+1].strip()
    else:
        return None

#
def get_next_arg(arg):
    """get the next argument in the comment line that follows
       argument 'arg'"""

    if len(sys.argv) > sys.argv.index(arg)+1:
        return sys.argv[sys.argv.index(arg)+1].strip()
    else:
        return None

if __name__ == '__main__':

    # run the main routine
    main()


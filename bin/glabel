#!/usr/bin/env python
"""
The main graci driver.
"""
import os
import sys as sys
import h5py as h5py
import graci.io.chkpt as chkpt

#
def main():
    """
    Merges a list of checkpoint files into a single checkpoint file. 
    """

    # read command line options
    chkpt_file, show, section, label, var, attr_str = read_cmdline()

    # open the checkpoint file
    chkpt_handle = h5py.File(chkpt_file, 'r+', libver='latest')
    
    if show:
        print_contents(chkpt_handle)

    else:

        # from section, label and variable name, generate full path to
        # the dataset
        dset = dset_name(chkpt_handle, section, label, var)

        # construct a dictionary from key value pairs
        attr_dict = create_attr(attr_str)

        # write attribute
        chkpt.write_attribute(chkpt_handle, dset, 'label', attr_dict)

        # close
        chkpt_handle.close()
   
    return

#
def print_contents(chkpt_handle):
    """
    print the top level objs in chkpt_handle and the corresponding label
    """
    grp_lst = chkpt.contents(file_handle = chkpt_handle)

    for grp in grp_lst:
        label = chkpt.read_attribute(chkpt_handle, grp, 'label')
        sec_name = grp.strip().split('.')[0].lower()
        print('Section: {:>20}  label: {:>20}'.format(sec_name, label))

    return

#
def read_cmdline():
    """
    Read command line arguments
    Set relevant global variables.
    """

    arg_list = sys.argv[1:]

    file = arg_list[0]
    if not os.path.isfile(file):
        sys.exit(' Checkpoint file not found: '+str(file))

    list_contents = False
    section       = None
    label         = None
    var           = None
    astr          = None
    for arg in arg_list[1:]:

        if arg == '-list':
            list_contents = True

        if arg == '-section':
            section = get_next_arg(arg)

        if arg == '-label':
            label = get_next_arg(arg)

        if arg == '-var':
            var = get_next_arg(arg)

        if arg == '-value':
            astr = get_next_arg(arg)

    return file, list_contents, section, label, var, astr

#
def get_next_arg(arg):
    """get the next argument in the comment line that follows
       argument 'arg'"""

    if len(sys.argv) > sys.argv.index(arg)+1:
        return sys.argv[sys.argv.index(arg)+1].strip()
    else:
        return None

#
def dset_name(chkpt_handle, section, label, var):
    """
    find the name of the data set in the checkpoint file
    """

    chkpt_contents = chkpt.contents(file_handle = chkpt_handle)

    d_name = ''
    for grp in chkpt_contents:
        if section in grp.lower():
            grp_label = chkpt.read_attribute(chkpt_handle, grp, 'label')
            if str(grp_label) == str(label):
                dset_grp = grp
                d_name   = chkpt.read_attribute(chkpt_handle, grp, var)
                break

    if d_name == '':
        sys.exit(' SECTION: '+str(section)+
                 ' LABEL:   '+str(label)+
                 ' -- variable not found: '+str(var))

    dset_path = dset_grp + '/' + d_name

    return dset_path


#
def create_attr(d_str):
    """
    create dictonary from key,value string
    """

    adict = {}
    str_arr = d_str.strip().split()

    for i in range(0, len(str_arr), 2):
        adict[str_arr[i]] = str_arr[i+1]

    return adict


#
def get_next_arg(arg):
    """get the next argument in the comment line that follows
       argument 'arg'"""

    if len(sys.argv) > sys.argv.index(arg)+1:
        return sys.argv[sys.argv.index(arg)+1].strip()
    else:
        return None

if __name__ == '__main__':

    # run the main routine
    main()


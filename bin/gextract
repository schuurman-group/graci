#!/usr/bin/env python
"""
The main graci driver.
"""
import os
import sys as sys
import numpy as np
import h5py
import graci.io.chkpt as chkpt
import graci.core.params

valid_formats = ['molden','gamess']
orb_objs      = {'-scf' : ['Scf'],
                 '-nos' : ['Dftmrci','Dftcis'],
                 '-nto' : ['Transition'],
                 '-ndo' : ['Transition']}
wfn_objs      = {'-dets' : ['Dftmrci','Dftcis']}                
diab_objs     = {'-diabpot' : ['Dftmrci2']}

#
def main():
    """Runs a GRaCI computation."""

    # read command line options
    chkpt_file, extract_list, cutoff = read_cmdline()

    # parse the wfn file and pull out all 
    # determinants with coefficients >= cutoff
    extract_orbitals(chkpt_file, extract_list)
   
    # extract det/csf lists if requested
    extract_wfns(chkpt_file, extract_list)

    # extract the diabatic potentials if requested
    extract_diabpot(chkpt_file, extract_list)
    
    return

#
def read_cmdline():
    """
    Read command line arguments
    Set relevant global variables.
    """

    extract_list = {'-scf'     : None,
                    '-nos'     : None,
                    '-nto'     : None, 
                    '-ndo'     : None,
                    '-dets'    : None,
                    '-diabpot' : None,
                    '-format'  : 'molden',
                    '-cutoff'  : 0,
                    '-cartao'  : 'true'}

    chkpt_file  = sys.argv[1].strip()
    cutoff      = 0.

    for arg in extract_list.keys():
        if arg in sys.argv:
            # what follows scf is the name of the scf
            # section
            arg_val = get_next_arg(arg)
            # section name is not absolutely necessary: if a single 
            # appropriate section is present, pull quantities from that
            if arg_val not in extract_list.keys() and arg_val is not None:
                extract_list[arg] = arg_val
            # if argument not given, define default behavior
            else:
                extract_list[arg] = 'default'
    
    # do some sanity checking on the format argument
    if extract_list['-format'] not in valid_formats:
        print("File format: "+str(extract_list['-format'])+
                                       " not a known file format")
        sys.exit(1)

    return chkpt_file, extract_list, cutoff

#
def extract_orbitals(chkpt_file, extract_list):
    """read the the determinants from the h5 wfn file"""

    # get the contents of the checkpoint file
    chkpt_objs = chkpt.contents(file_name=chkpt_file)

    # determine the GRaCI object(s) that need to be created,
    # or if requests are ambiguous (multiple objects of same
    # type exist)
    
    # first scf object(s)
    for key, value in extract_list.items():

        # skip this item if not requested
        if value is None:
            continue

        # these are not orbital related 
        if key=='-dets' or key=='-cutoff' or \
                key=='-format' or key=='-cartao' \
                or key == '-diabpot':
            continue

        # figure out which object to extract:
        # 1. if -scf, either go with name provided, or, if only
        #    one Scf object present, extract that. Else: fail
        # 2. if -nos, either go with name provided, or, if only
        #    one Postscf object present, extract that. Else: fail
        # 3. if -nto/-ndo, either go with name provided, or, if only
        #    one Transitoin object present, extract that. Else: fail
        valid_objs = orb_objs[key]

        # names in chkpt file given by ClassName.label
        obj_names = [name for name in chkpt_objs if 
                                  name.split('.')[0]  in valid_objs]
        if value == 'default' and len(obj_names) == 1:
            obj2extract = obj_names[0]
        else:
            obj2extract = str(value)

        if obj2extract not in obj_names:
            print("Section: "+str(obj2extract)+" not found "+
                    "in chkpt file")
            sys.exit(1)

        # print orbitals using cartesian (or spherical) AOs
        if extract_list['-cartao'].lower() == 'true':
            cartaos = True
        else:
            cartaos = False

        # extract objects and write to current directory
        chkpt_obj = chkpt.read(obj2extract, file_name=chkpt_file)
        chkpt_obj.export_orbitals(file_format=extract_list['-format'], 
                                  orb_dir=False, cart=cartaos)

    return

#
def extract_wfns(chkpt_file, extract_list):
    """Print the determinant list"""

    if extract_list['-dets'] is None:
        return

    # name of method object to get determinants from
    # currenty default is to extract all states. We may want to add
    # the ability to refine that in the future
    wfn_name = extract_list['-dets']

    # determine what objects to extract
    chkpt_objs = chkpt.contents( file_name=chkpt_file)

    # these are the postscf methods for which wfn extract is 
    # defined
    valid_objs = wfn_objs['-dets']

    # names in chkpt file given by ClassName.label
    obj_names = [name for name in chkpt_objs if
                          name.split('.')[0]  in valid_objs]

    if wfn_name == 'default' and len(obj_names) == 1:
        wfn2extract = obj_names[0]
    else:
        # assume that only the section label is given
        # and we need to append the class name
        name_chk = [wfn_name in obj_name for obj_name in obj_names]
        if sum(name_chk) != 1:
            print("Ambiguous section name. \n"+
                  "Requested: "+str(wfn_name)+" Found: "+str(obj_names))
            sys.exit(1)
        wfn2extract = obj_names[name_chk.index(True)]

    # now we need to find out how many states there are and their
    # indices
    wfn_dsets = chkpt.contents(file_name = chkpt_file, 
                               grp_name = wfn2extract)

    cf_inds =  []
    for wfn in wfn_dsets:
        if 'wfn_cf' in wfn:
            cf_inds.append(int(wfn.replace('wfn_cf','')))

    # make sure the cutoff value is interprable
    try:
        cutoff = float(extract_list['-cutoff'])
    except:
        print("WARNING: cannot intepret cutoff value of: " + 
              str(extract_list['-cutoff'])+" as a float. Setting to 0")
        cutoff = 0.

    f_names = ['S', 'D', 'T', 'Q', '5', '6', '7', '8']

    # extract wfns and write them to file
    for indx in cf_inds:
        cf, det = chkpt.read_wfn(wfn2extract, indx, cutoff,
                                 file_name = chkpt_file)

        (nmo, ndets) = det.shape
        if ndets > 0:
            # write to file. Determine multiplicity by taking 
            # open(alpha) - open(beta)
            unique, counts = np.unique(det[:,0], return_counts=True)
            cnts = dict(zip(unique, counts))
            nalpha = 0
            nbeta = 0
            if 1 in cnts.keys():
                nalpha = cnts[1]
            if -1 in cnts.keys():
                nbeta  = cnts[-1]
            nopen = abs(nalpha-nbeta)

            out_file = f_names[nopen]+str(indx)+"_det.dat"
            with open(out_file, 'w') as detlist:
                for idet in range(ndets):
                    det_str = '{:14.10f} '.format(cf[idet])
                    det_str += ('%3d'*nmo) % tuple(det[:,idet])
                    detlist.write(det_str+'\n')

    return

#
def extract_diabpot(chkpt_file, extract_list):
    """Output the diabatic potentials"""

    if extract_list['-diabpot'] is None:
        return

    # requested Dftmrci2 object label(s)
    string = extract_list['-diabpot']

    # if the Dftmrci2 object labels were given in
    # the string[i:j], format, then convert to
    # [stringi, stringi+1,..., stringj]
    if '[' in string and ']' in string:
        interval = string[string.index('[')+1:string.index(']')]
        i = int(interval[:interval.index(':')])
        j = int(interval[interval.index(':')+1:])
        stem = string[:string.index('[')]
        labels = [stem+str(k) for k in range(i,j+1)]
    else:
        labels = [string]
    
    # get the object name(s)
    chkpt_objs = chkpt.contents(file_name=chkpt_file)
    valid_objs = diab_objs['-diabpot']
    obj_names  = []
    for i in range(len(labels)):
        try:
            obj_names.append([name for name in chkpt_objs if
                              name.split('.')[0] in valid_objs
                              and name.endswith('.'+labels[i])][0])
        except:
            pass
            
    # get the Dftmrci2 object(s)
    chkpt_objs = [chkpt.read(obj_names[i], file_name = chkpt_file)
                  for i in range(len(obj_names))]
    
    # no. irreps (enforced to be the same for all geometries by
    # GRaCI during a diabatisation run)
    nirr = len(chkpt_objs[0].scf.mol.irreplbl)
            
    # irrep labels
    irreplbl = chkpt_objs[0].scf.mol.irreplbl
    
    # make the output directory
    if not os.path.isdir('diabpot'):
        os.mkdir('diabpot')
        
    # output the diabatic potentials for each symmetry block
    for irr in range(nirr):

        n_states   = chkpt_objs[0].n_states_sym(irr)

        # open the output files
        file_names = ['diabpot/diabpot_'+irreplbl[irr]
                      +'_'+str(i+1)+'_'+str(j+1)
                      for i in range(n_states)
                      for j in range(i,n_states)]
        
        f = [open(file_names[i], 'w')
             for i in range(len(file_names))]

        # write the diabatic potentials to file
        for n in range(len(chkpt_objs)):

            try:
                # Diabatic potential
                wmat = chkpt_objs[n].diabpot[irr]
            except:
                # No diabatic potential object: assume
                # that we are at Q0
                wmat = np.diag(chkpt_objs[n].energies)
                
            k = -1
            for i in range(n_states):
                for j in range(i,n_states):
                    k += 1
                    f[k].write('{:4d} {:10.6f}\n'
                               .format(n, wmat[i,j]))
    
    return

#
def get_next_arg(arg):
    """get the next argument in the comment line that follows
       argument 'arg'"""

    if len(sys.argv) > sys.argv.index(arg)+1:
        return sys.argv[sys.argv.index(arg)+1].strip()
    else:
        return None

if __name__ == '__main__':

    # run the main routine
    main()


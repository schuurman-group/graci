#!/usr/bin/env python
"""
The main graci driver.
"""
import os
import sys as sys
import numpy as np
import h5py
import graci.io.chkpt as chkpt
import graci.core.params
import graci.core.orbitals as orbitals

valid_formats = ['molden','gamess']
orb_objs      = {'-scf' : ['Scf'],
                 '-nos' : ['Dftmrci','Dftcis'],
                 '-nto' : ['Transition'],
                 '-ndo' : ['Transition']}
wfn_objs      = {'-dets' : ['Dftmrci','Dftcis','Dftmrci2']}                
diab_objs     = {'-diabpot' : ['Dftmrci2']}

#
def main():
    """Runs a GRaCI computation."""

    # read command line options
    chkpt_file, extract_list, cutoff = read_cmdline()

    # parse the wfn file and pull out all 
    # determinants with coefficients >= cutoff
    extract_orbitals(chkpt_file, extract_list)
   
    # extract det/csf lists if requested
    extract_wfns(chkpt_file, extract_list)

    # extract the diabatic potentials if requested
    extract_diabpot(chkpt_file, extract_list)
    
    return

#
def read_cmdline():
    """
    Read command line arguments
    Set relevant global variables.
    """

    extract_list = {'-scf'     : None,
                    '-nos'     : None,
                    '-nto'     : None, 
                    '-ndo'     : None,
                    '-dets'    : None,
                    '-diabpot' : None,
                    '-format'  : 'molden',
                    '-cutoff'  : 0,
                    '-cartao'  : 'true'}

    chkpt_file  = sys.argv[1].strip()
    cutoff      = 0.

    for arg in extract_list.keys():
        if arg in sys.argv:
            # what follows scf is the name of the scf
            # section
            arg_val = get_next_arg(arg)
            # section name is not absolutely necessary: if a single 
            # appropriate section is present, pull quantities from that
            if arg_val not in extract_list.keys() and arg_val is not None:
                extract_list[arg] = arg_val
            # if argument not given, define default behavior
            else:
                extract_list[arg] = 'default'
    
    # do some sanity checking on the format argument
    if extract_list['-format'] not in valid_formats:
        print("File format: "+str(extract_list['-format'])+
                                       " not a known file format")
        sys.exit(1)

    return chkpt_file, extract_list, cutoff

#
def extract_orbitals(chkpt_file, extract_list):
    """read the the determinants from the h5 wfn file"""

    # get the contents of the checkpoint file
    chkpt_objs = chkpt.contents(file_name=chkpt_file)

    # determine the GRaCI object(s) that need to be created,
    # or if requests are ambiguous (multiple objects of same
    # type exist)
    
    # first scf object(s)
    for key, value in extract_list.items():

        # skip this item if not requested
        if value is None:
            continue

        # these are not orbital related 
        if key=='-dets' or key=='-cutoff' or \
                key=='-format' or key=='-cartao' \
                or key == '-diabpot':
            continue

        # figure out which object to extract:
        # 1. if -scf, either go with name provided, or, if only
        #    one Scf object present, extract that. Else: fail
        # 2. if -nos, either go with name provided, or, if only
        #    one Postscf object present, extract that. Else: fail
        # 3. if -nto/-ndo, either go with name provided, or, if only
        #    one Transitoin object present, extract that. Else: fail
        valid_objs = orb_objs[key]

        # names in chkpt file given by ClassName.label
        obj_names = [name for name in chkpt_objs if 
                                  name.split('.')[0]  in valid_objs]
        if value == 'default' and len(obj_names) == 1:
            obj2extract = obj_names[0]
        else:
            obj2extract = str(value)

        if obj2extract not in obj_names:
            print("Section: "+str(obj2extract)+" not found "+
                    "in chkpt file")
            sys.exit(1)

        # print orbitals using cartesian (or spherical) AOs
        if extract_list['-cartao'].lower() == 'true':
            cartaos = True
        else:
            cartaos = False

        # extract objects and write to current directory
        chkpt_obj = chkpt.read(obj2extract, file_name=chkpt_file)
        orbitals.export_orbitals('mos.dat', chkpt_obj.mol, 
               chkpt_obj.orbs, orb_sym = chkpt_obj.orb_irrep, 
               orb_ener=chkpt_obj.orb_ener, 
               cart=cartaos, fmt=extract_list['-format'])

    return

#
def extract_wfns(chkpt_file, extract_list):
    """Print the determinant list"""

    if extract_list['-dets'] is None:
        return

    # multiplicity based file names
    f_names = ['S', 'D', 'T', 'Q', '5', '6', '7', '8']

    # name of method object to get determinants from
    # currenty default is to extract all states. We may want to add
    # the ability to refine that in the future
    wfn_name = extract_list['-dets']

    # determine what objects to extract
    chkpt_objs = chkpt.contents( file_name=chkpt_file)

    # these are the postscf methods for which wfn extract is 
    # defined
    valid_objs = wfn_objs['-dets']

    # names in chkpt file given by ClassName.label
    obj_names = [name for name in chkpt_objs if
                          name.split('.')[0]  in valid_objs]

    if wfn_name == 'default' and len(obj_names) == 1:
        wfn2extract = obj_names[0]
    else:
        # assume that only the section label is given
        # and we need to append the class name
        name_chk = [wfn_name == obj_name for obj_name in obj_names]
        if sum(name_chk) != 1:
            print("Ambiguous section name. \n"+
                  "Requested: "+str(wfn_name)+" Found: "+str(obj_names))
            sys.exit(1)
        wfn2extract = obj_names[name_chk.index(True)]

    # make sure the cutoff value is interprable
    try:
        cutoff = float(extract_list['-cutoff'])
    except:
        print("WARNING: cannot intepret cutoff value of: " +
              str(extract_list['-cutoff'])+" as a float. Setting to 0")
        cutoff = 0.

    # read in the wfn object
    ci_method = chkpt.read(wfn2extract, file_name=chkpt_file)

    # write the bit strings, ordered by irrep
    for irr in range(ci_method.n_irrep()):
 
        if ci_method.n_states_sym(irrep=irr) == 0:
            continue

        dstr   = ci_method.det_strings[irr]
        cf     = ci_method.vec_det[irr]   
        nd,nst = cf.shape
        nmo    = ci_method.scf.nmo 

        if nd == 0 or nst == 0:
            continue

        dfmt   = [bstr2vec(dstr[:,:,i], nmo) for i in range(nd)]
        unique, counts = np.unique(dfmt[0], return_counts=True)
        cnts = dict(zip(unique, counts))
        nalpha = 0
        nbeta = 0
        if 1 in cnts.keys():
            nalpha = cnts[1]
        if -1 in cnts.keys():
            nbeta  = cnts[-1]
        nopen = abs(nalpha-nbeta)

        for ist in range(nst):
            indx  = ci_method.state_index(irr, ist)
            cf_srt = np.flip(np.argsort(np.absolute(cf[:,ist])))

            out_file = f_names[nopen]+str(indx)+"_det.dat"
            with open(out_file, 'w') as dfile:
                idet = 0
                while np.abs(cf[cf_srt[idet],ist]) > cutoff and idet < nd:
                    det_str = '{:14.10f} '.format(cf[cf_srt[idet],ist])
                    det_str += ('%3d'*nmo) % tuple(dfmt[cf_srt[idet]])
                    dfile.write(det_str+'\n')
                    idet += 1

    return

def bstr2vec(bstr, nmo):

    STR_LEN = 64
    n_int, n_spin = bstr.shape

    alpha = []
    beta  = []

    #print('bstr='+str(bstr),flush=True)
    # use numpy intrinsic binary_repr -- if width specified,
    # returns two's complement value
    for i_int in range(n_int):
        alpha  += list(np.binary_repr(bstr[i_int,0],
                                       width=STR_LEN))[::-1]
        beta   += list(np.binary_repr(bstr[i_int,1],
                                       width=STR_LEN))[::-1]

    # only take first nmo entries -- the rest are padding
    dabs = [int(alpha[i]) + int(beta[i]) for i in range(nmo)]
    rdet = np.array(dabs, dtype=np.short)
    for i in range(nmo):
        if int(alpha[i]) == 0:
            rdet[i] = -dabs[i]

    #print('rdet='+str(rdet),flush=True)
    return rdet


#
def extract_diabpot(chkpt_file, extract_list):
    """Output the diabatic potentials"""

    if extract_list['-diabpot'] is None:
        return

    # requested Dftmrci2 object label(s)
    string = extract_list['-diabpot']

    # if the Dftmrci2 object labels were given in
    # the string[i:j], format, then convert to
    # [stringi, stringi+1,..., stringj]
    if '[' in string and ']' in string:
        interval = string[string.index('[')+1:string.index(']')]
        i = int(interval[:interval.index(':')])
        j = int(interval[interval.index(':')+1:])
        stem = string[:string.index('[')]
        labels = [stem+str(k) for k in range(i,j+1)]
    else:
        labels = [string]
    
    # get the object name(s)
    chkpt_objs = chkpt.contents(file_name=chkpt_file)
    valid_objs = diab_objs['-diabpot']
    obj_names  = []
    for i in range(len(labels)):
        try:
            obj_names.append([name for name in chkpt_objs if
                              name.split('.')[0] in valid_objs
                              and name.endswith('.'+labels[i])][0])
        except:
            pass
            
    # get the Dftmrci2 object(s)
    chkpt_objs = [chkpt.read(obj_names[i], file_name = chkpt_file)
                  for i in range(len(obj_names))]
    
    # no. irreps (enforced to be the same for all geometries by
    # GRaCI during a diabatisation run)
    nirr = len(chkpt_objs[0].scf.mol.irreplbl)
            
    # irrep labels
    irreplbl = chkpt_objs[0].scf.mol.irreplbl
    
    # make the output directory
    if not os.path.isdir('diabpot'):
        os.mkdir('diabpot')
        
    # output the diabatic potentials for each symmetry block
    for irr in range(nirr):

        n_states   = chkpt_objs[0].n_states_sym(irr)

        # open the output files
        file_names = ['diabpot/diabpot_'+irreplbl[irr]
                      +'_'+str(i+1)+'_'+str(j+1)
                      for i in range(n_states)
                      for j in range(i,n_states)]
        
        f = [open(file_names[i], 'w')
             for i in range(len(file_names))]

        # write the diabatic potentials to file
        for n in range(len(chkpt_objs)):

            try:
                # Diabatic potential
                wmat = chkpt_objs[n].diabpot[irr]
            except:
                # No diabatic potential object: assume
                # that we are at Q0
                wmat = np.diag(chkpt_objs[n].energies)
                
            k = -1
            for i in range(n_states):
                for j in range(i,n_states):
                    k += 1
                    f[k].write('{:4d} {:10.6f}\n'
                               .format(n, wmat[i,j]))
    
    return

#
def get_next_arg(arg):
    """get the next argument in the comment line that follows
       argument 'arg'"""

    if len(sys.argv) > sys.argv.index(arg)+1:
        return sys.argv[sys.argv.index(arg)+1].strip()
    else:
        return None

if __name__ == '__main__':

    # run the main routine
    main()


#!/usr/bin/env python
"""
The main graci driver.
"""
import os
import sys as sys
import h5py as h5py
import graci.io.chkpt as chkpt

#
def main():
    """Merges a list of checkpoint files into a single checkpoint
       file. """

    # read command line options
    chkpt_out, chkpt_in = read_cmdline()

    # open the output checkpoint file
    merged_chkpt = h5py.File(chkpt_out, 'a', libver='latest')

    # merge chkpt_file into chkpt_out
    for chkpt_file in chkpt_in:
        merge_chkpt(merged_chkpt, chkpt_file)

    merged_chkpt.close()

    return

#
def merge_chkpt(out_file, input_file):
    """
    merge_chkpt -- merges two checkpoint files

    Arguments:
    chkpt:       The file name string into which we are merging
    input_file:  The file that we are scanning and copying into chkpt

    Returns:
    status:      None
    """

    # get the contents of the file we're merging into
    chkpt_contents = chkpt.contents(file_handle=out_file)
    if chkpt_contents is None:
        chkpt_contents = []

    # define the file handles so we're not constants opening and closing
    # chkpt files
    in_chkpt  = h5py.File(input_file, 'r', libver='latest')

    # get the contents of the input_file
    inp_contents = chkpt.contents(file_handle=in_chkpt)
    if inp_contents is None:
        inp_contents = []

    # get the file name stub
    in_stub = os.path.basename(input_file).split('.')[0]

    # merge inp_contents into chkpt. We will name the inp groups
    # with input_file.grp_name. 
    for inp_grp in inp_contents:
        in_obj = chkpt.read(inp_grp, file_handle=in_chkpt) 

        # chkpt library names groups via Class_name.label
        # so, reset the label to label.in_stub
        merge_label = in_obj.label+'.'+in_stub

        # just to be safe, confirm this object doesn't already exist
        chk_label = str(type(in_obj).__name__)+'.'+str(merge_label)
        if chk_label in chkpt_contents:
            sys.exit('gmerge failed: '+str(chk_label)+
                     ' already in chkpt file')

        # write the object to the checkpoint file
        chkpt.write(in_obj, file_handle=out_file, 
                            label_suffix='.'+in_stub)

    in_chkpt.close()

    return


def read_cmdline():
    """
    Read command line arguments
    Set relevant global variables.
    """

    chk_list = []
    chk_out  = None
    arg_list = sys.argv[1:]

    if '-o' in arg_list:
        ind = arg_list.index('-o')
        chk_out = arg_list[ind+1]
        arg_list.remove('-o')
        arg_list.remove(chk_out)
    else:
        print('Output chkpt file not specified. Exiting.')
        sys.exit()

    for ichk in arg_list:
         # check the checkpoint files exist`
        if not os.path.isfile(ichk):
            print('file: '+str(ichk)+' not found. Skipping.')
        else:
            chk_list.append(ichk)
        
    return chk_out, chk_list

#
def get_next_arg(arg):
    """get the next argument in the comment line that follows
       argument 'arg'"""

    if len(sys.argv) > sys.argv.index(arg)+1:
        return sys.argv[sys.argv.index(arg)+1].strip()
    else:
        return None

if __name__ == '__main__':

    # run the main routine
    main()

